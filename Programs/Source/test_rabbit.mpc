# ./compile.py test_rabbit
# ./Scripts/rep-field.sh test_rabbit

program.use_edabit(True)
program.set_rabbit(True)

def RabbitLT(R, x, k):
    """
    res = R <? x (logarithmic rounds version)

    R: clear integer register
    x: array of secret bits
    """

    R_bits = x[0].bit_decompose_clear(R, k)
    y = [program.curr_block.new_reg('s') for i in range(k)]
    z = [program.curr_block.new_reg('s') for i in range(k+1)]
    w = [program.curr_block.new_reg('s') for i in range(k)]

    for i in range(k):
        y[i] = x[i].bit_xor(R_bits[i]).bit_xor(1)

    z[k-1] = y[k-1]
    for i in range(k-1, 0, -1):
        z[i-1] = y[i-1] * z[i]
    
    z[k] = 1
    for i in range(k, 0, -1):
        w[i-1] = z[i-1] ^ z[i]

    total = program.curr_block.new_reg('s')
    out = program.curr_block.new_reg('s')
    total = x[0] & (1-x[0])
    for i in range(k):
        out = R_bits[i] & w[i];
        total = total ^ out;
    return 1 - total

def customLTZ(s, a, k, kappa):
    """
    s = (a ?< 0)

    k: bit length of a
    """
    if program.use_rabbit():

        BIT_SIZE = 64
        M = None; R = None; r = None; r_bits = None; 
        length_eda = BIT_SIZE

        if (program.options.ring):
            # length_eda = program.bit_length + 1
            M = 2**(program.bit_length + 1)
            R = 2**(program.bit_length)
        else:
            # length_eda = 64
            M = program.P
            R = (M - 1) // 2
            # M = 2**64
            # R = 2**63
            # print(R)
            # print(M)
            # print(length_eda)

        r, r_bits = sint.get_edabit(length_eda, True)

        masked_a = (a + r).reveal()
        masked_b = masked_a + M - R

        w1 = RabbitLT(masked_a, r_bits, BIT_SIZE)
        w2 = RabbitLT(masked_b, r_bits, BIT_SIZE)

        # Can this be fixed?
        w3 = (masked_b < 0)

        movs(s, sint.conv(w1 - w2 + w3))

def rabbit(a, b):
    res = sint()
    customLTZ(res, a-b, program.bit_length, None)
    return res


a = sint(0)
b = sint(-7627189370119394682)
# print_ln('%s', program.P)
print_ln('%s', sint(9223372036855103489).reveal())
print_ln('compare result: %s', rabbit(a,b).reveal())


